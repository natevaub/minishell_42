int	ft_set_fd(t_minishell *shell, t_pipex *p, t_lcmd *node)
{
	if (p->idx == 0)
	{
		if (node->fd_read != 0)
		{
			dup2(node->fd_read, STDIN_FILENO);
			close(node->fd_read);
		}
		close(p->pipe_fd[0][0]);
		dup2(p->pipe_fd[0][1], STDOUT_FILENO);
	}
	else if (p->idx != p->count_cmds - 1)
	{
		close(p->pipe_fd[(p->idx - 1) % 2][1]);  // Close write end of previous pipe
		dup2(p->pipe_fd[(p->idx) - 1 % 2][0], STDIN_FILENO); // Set input from pipe
		close(p->pipe_fd[(p->idx) % 2][0]);
		dup2(p->pipe_fd[(p->idx) % 2][1], STDOUT_FILENO);
	}
	else
	{
		if (node->fd_write != 1)
		{
			dup2(node->fd_write, STDOUT_FILENO);
			close(node->fd_write);
		}
		close(p->pipe_fd[(p->idx - 1) % 2][1]);
		dup2(p->pipe_fd[(p->idx - 1) % 2][0], STDIN_FILENO);
	}
	// close(p->pipe_fd[p->idx % 2][0]);				deplacÃ© de apres ft_set_fds
	// close(p->pipe_fd[p->idx % 2][1]);
	return (0);
}

int ft_set_fd_builtins(t_minishell *shell, t_pipex *p, t_lcmd *node)
{
	// Handle input redirection if needed
	if (node->fd_read != 0)
	{
		dup2(node->fd_read, STDIN_FILENO);
		close(node->fd_read);
	}

	// Handle output redirection if needed
	if (node->fd_write != 1)
	{
		dup2(node->fd_write, STDOUT_FILENO);
		close(node->fd_write);
	}

	return (0);
}

int	ft_exec_child(t_lcmd *cmd, char **envp)
{
	char	*cmd_with_path;
	cmd_with_path = ft_get_right_path(cmd->cmd);
	// ft_putstr_fd(cmd_with_path, 2);
	if (execve(cmd_with_path, cmd->option, envp) < 0)
	{
		free(cmd_with_path);
		exit(1);
	}
	return (0);
}

void	ft_exec_parent(t_pipex *p, pid_t *pid)
{
	int	i;
	int	status;

	i = -1;
	close(p->pipe_fd[(p->idx - 1) % 2][0]);
	close(p->pipe_fd[(p->idx - 1) % 2][1]);
	close(p->pipe_fd[(p->idx) % 2][0]);
	close(p->pipe_fd[(p->idx) % 2][1]);
	while (++i < p->count_cmds)
	{
		waitpid(-1, &status, 0);
		if (WIFSIGNALED(status))
		{
			if (WTERMSIG(status) == SIGQUIT)
				write(1, "Quit: 3\n", 8);
			else if (WTERMSIG(status) == SIGINT)
				write(1, "\n", 1);
			global.last_exit_status = 128 + status;
		}
		if (WIFEXITED(status))
			global.last_exit_status = WEXITSTATUS(status);
	}
}

int	ft_pipeline_execution(t_minishell *shell, char **envp)
{
	t_lcmd	*cmd;
	pid_t	pid;

	ft_init_pipes_struct(shell);
	cmd = shell->cmd;
	while (cmd != NULL)
	{
		if (builtin_check(cmd->cmd) == 1)
		{
			ft_set_fd_builtins(shell, shell->p, cmd);
			builtin_redirect(cmd);
		}
		ft_pipe_dep_mod(shell->p);
		pid = fork();
		if (pid == 0)
		{
			ft_set_fd(shell, shell->p, cmd);
			ft_exec_child(cmd, envp);
		}
		else if (pid > 0)
		{
			if (shell->p->idx != 0)
			{
				close(shell->p->pipe_fd[(shell->p->idx - 1) % 2][0]);
				close(shell->p->pipe_fd[(shell->p->idx - 1) % 2][1]);
			}
		}
		shell->p->idx++;
		cmd = cmd->next;
	}
	ft_exec_parent(shell->p, &pid);
	return (0);
}

extern t_global	global;

//ENV WITH NO OPTIONS OR ARGUMENTS
/*If no utility is specified, env prints out the names and values
of the variables in the environment, with one name/value pair per line.*/

//find character c in string s, similar to ft_strchr
int	find_c(char *str, char c)
{
	while (*str)
	{
		if (*str == c)
			return (1);
		str++;
	}
	return (0);
}

//print environment when command env is called
int	print_env(t_lcmd *cmd)
{
	t_venv	*head;

	head = global.copy_env;
	while (head)
	{
		if (find_c(head->word, '='))
		{
			ft_putstr_fd(head->word, cmd->fd_write);								//adjust fd if redirection
			ft_putchar_fd('\n', cmd->fd_write);
			// ft_printf(head->word);								//adjust fd if redirection
			// ft_printf("\n");
		}
		head = head->next;
	}
	ft_putstr_fd("_=/usr/bin/env\n", cmd->fd_write);								//adjust fd if redirection
	return(EXIT_SUCCESS);
}

int	builtin_check(char *cmd)
{
	if (ft_strncmp(cmd, "echo", 4) == 0)
		return (1);
	else if (ft_strncmp(cmd, "cd", 2) == 0)
		return (1);
	else if (ft_strncmp(cmd, "pwd", 3) == 0)
		return (1);
	else if (ft_strncmp(cmd, "export", 6) == 0)
		return (1);
	else if (ft_strncmp(cmd, "unset", 5) == 0)
		return (1);
	else if (ft_strncmp(cmd, "env", 3) == 0)
		return (1);
	else if (ft_strncmp(cmd, "exit", 4) == 0)
		return (1);
	else if (ft_strncmp(cmd, "minishell", 9) == 0)
		return (1);
	else
		return (0);
}

/*if yes, checks if there are given arguments
and redirects to right builtin function for execution*/
void	builtin_redirect(t_lcmd *cmd)
{
	if (ft_strncmp(cmd->cmd, "echo", 4) == 0)
		global.last_exit_status = cmd_echo(cmd);
	else if (ft_strncmp(cmd->cmd, "cd", 2) == 0)
		global.last_exit_status = cmd_cd(cmd);
	else if (ft_strncmp(cmd->cmd, "pwd", 3) == 0)
		global.last_exit_status = cmd_pwd(cmd);
	else if (ft_strncmp(cmd->cmd, "export", 6) == 0)
	{
		if (!(cmd->option[1]))
			global.last_exit_status = print_export(cmd);
		else
			global.last_exit_status = add_var_to_export((cmd->option) + 1);
	}
	else if (ft_strncmp(cmd->cmd, "unset", 5) == 0)
	{
		if((cmd->option) + 1)
			global.last_exit_status = cmd_unset((cmd->option) + 1);
	}
	else if (ft_strncmp(cmd->cmd, "env", 3) == 0)
		global.last_exit_status = print_env(cmd);
	else if (ft_strncmp(cmd->cmd, "exit", 4) == 0)
		cmd_exit(*((cmd->option) + 1));
	else if (ft_strncmp(cmd->cmd, "minishell", 9) == 0)
		change_shvl_in_env(1);
}